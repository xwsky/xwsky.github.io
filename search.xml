<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[centos 7 jdk环境变量设置]]></title>
      <url>https://xwsky.github.io/2016/10/29/centos7/centos%207%20jdk%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E8%AE%BE%E7%BD%AE/</url>
      <content type="text"><![CDATA[centos 7 jdk环境变量设置jdk各版本官方下载地址 http://www.oracle.com/technetwork/java/javase/archive-139210.html1$ sudo vi /etc/profile 1234export JAVA_HOME=/usr/local/java/jdk1.8.0_73export PATH=$PATH:$JAVA_HOME/binexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport JAVA_HOME PATH CLASSPATH 使设置生效 1$ source /etc/profile]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[CentOS7安装配置]]></title>
      <url>https://xwsky.github.io/2016/10/29/centos7/CentOS7%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      <content type="text"><![CDATA[前提是系统已经安装就绪，此时除了root，其他账号没有sudo权限，使用root登陆系统1、设置主机名1$ hostnamectl set-hostname XXXXXX 或者编辑此文件进行设置1$ vi /etc/hostname 2、设置hosts1$ vi /etc/hosts 将此文件改为123127.0.0.1 XXXXXX localhost#127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain6 3、设置静态ip1$ vi /etc/sysconfig/network-scripts ifcfg-??????(名子不确定) 将BOOTPROTO=dhcp注释掉，并且设置ONBOOT=yes并且在文件最下面加入(根据自己实际情况)：12345IPADDR=192.168.100.27 #IPGATEWAY=192.168.100.1 #默认网关NETMASK=255.255.255.0 #子网掩码DNS1=192.168.100.159 #DNS1DNS2=114.114.114.114 #DNS2 4、设置sudo用户权限12$ chmod u+w /etc/sudoers #将此文件设置为可写$ vi /etc/sudoers #找到 root ALL=(ALL) All, 在下面加入 XXXXX ALL=(ALL) ALL 5、ssh连接123$ service network restart #重启网络$ reboot #重启计算机$ ip addr #查看ip地址（此时还不能使用ifconfig） 重启成功后使用非root账号登陆123$ ip addr #查看ip地址（此时还不能使用ifconfig）$ sudo yum install net-tools #安装网络工具$ ifconfig #可以使用ifconfig了，并且可以使用xshell等工具进行ssh连接了 6、安装常用工具1234$ yum install lrzsz$ yum install vim$ yum install wget$ yum install zip unzip]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[centos 添加服务]]></title>
      <url>https://xwsky.github.io/2016/10/29/centos7/centos%20%E6%B7%BB%E5%8A%A0%E6%9C%8D%E5%8A%A1/</url>
      <content type="text"><![CDATA[Centos 系统服务;1234561.系统（system）服务,所在目录:/lib/systemd/system2.用户服务，所在目录:/usr/lib/systemd/区别： 系统服务开机没有登录就能运行。用户服务得用户登录后才能启动。 例子123456789101112131415161718192021222324252627282930313233343536373839在系统服务目录下新建nginx服务，文件需要以.service结尾。vi /lib/systemd/system/nginx.service添加如下内容[Unit] Description=nginx After=network.target [Service] Type=forking ExecStart=/www/lanmps/init.d/nginx start ExecReload=/www/lanmps/init.d/nginx restart ExecStop=/www/lanmps/init.d/nginx stop PrivateTmp=true [Install] WantedBy=multi-user.target设置执行权限chmod 754 nginx.service设置开机启动systemctl enable nginx.service至此系统级的服务已经配置好了，下面是一些参数的说明================================参数说明================================[Unit]:服务的说明Description:描述服务After:描述服务类别[Service]服务运行参数的设置Type=forking是后台运行的形式ExecStart为服务的具体运行命令ExecReload为重启命令ExecStop为停止命令PrivateTmp=True表示给服务分配独立的临时空间注意：[Service]的启动、重启、停止命令全部要求使用绝对路径[Install]服务安装的相关设置，可设置为多用户 系统服务命令1.设置服务开机自启动1systemctl enable httpd.service 2.设置服务开机不自启动1systemctl disable httpd.service 3.查看服务启动状态1systemctl status httpd.service （服务详细信息） 4.显示所有已启动的服务1systemctl is-active httpd.service （仅显示是否 Active) 5.启动某服务1systemctl start httpd.service 6.停止某服务1systemctl stop httpd.service 7.重启某服务1systemctl restart httpd.service]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[centos7 安装 mysql 5.7.14]]></title>
      <url>https://xwsky.github.io/2016/10/29/centos7/centos7%20%E5%AE%89%E8%A3%85%20mysql%205.7.14/</url>
      <content type="text"><![CDATA[centos7 mysql5.7.14编译好的通用二进制文件安装myql下载地址：http://dev.mysql.com/downloads/mysql/12345678910111213141516171819选择 Linux - GenericLinux - Generic (glibc 2.5) (x86, 64-bit), Compressed TAR Archivemysql-5.7.14-linux-glibc2.5-x86_64.tar.gz通过官方编译好的二进制文件tar.gz压缩包安装较为简单将下面的源码编译安装中的安装步骤中的2，3步骤换为将mysql安装文件复制到默认的安装路径下$ mv /mysql-5.7.14-linux-glibc2.5-x86_64.tar.gz /usr/local$ tar -zvxf mysql-5.7.14-linux-glibc2.5-x86_64.tar.gz将减压后的文件夹更名为mysql$ mv mysql-5.7.14-linux-glibc2.5-x86_64 mysql然后从第4步开始操作，第6步的初始化数据库，默认的数据存放路径为安装路径的data文件夹下$ /usr/local/mysql/bin/mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data备注：如果改变默认安装路径，则需要 修改/my.cnf，/etc/init.d/mysqld（/usr/local/mysql/support-files/mysql.serve的副本启动文件）中的 basedir=&apos;&apos;和datadir=&apos;&apos;路径 ===================================================================== centos 7 msql5.7.14源码编译安装1.下载所需安装包myql下载地址：http://dev.mysql.com/downloads/mysql/1234选择 Source CodeGeneric Linux (Architecture Independent), Compressed TAR Archive Includes Boost Headersmysql-boost-5.7.14.tar.gz说明：5.7以后必须要有Boost的支持，所以之间下载包含boost的源码。 2.安装123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172731.检查是否已经安装过mysql$ rpm -qa | grep mysql有的话卸载以前安装的mysql$ rpm -e --nodeps xxx （xxx 是搜索结果）删除所有相关文件（例如：/etc/my.cnf）注意centos 7 默认在/etc下有my.cnf文件将这个改名或删除，不然mysql启动会先加载/etc下的my.cnf文件导致，mysql启动失败例如$ mv /etc/my.cnf /etc/my.cnf.back2.安装编译代码的依赖包$ yum -y install make gcc-c++ cmake bison-devel ncurses-devel libaio$ yum install libaio libaio-devel -y$ yum install perl-Data-Dumper -y$ yum install net-tools -y3.加压缩并安装$ tar -zvxf mysql-boost-5.7.14.tar.gz$ cd mysql-5.7.14$ cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \-DMYSQL_DATADIR=/data/mysql \-DDOWNLOAD_BOOST=1 \-DWITH_BOOST=./boost \-DSYSCONFDIR=/etc \-DWITH_INNOBASE_STORAGE_ENGINE=1 \-DWITH_PARTITION_STORAGE_ENGINE=1 \-DWITH_FEDERATED_STORAGE_ENGINE=1 \-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \-DWITH_MYISAM_STORAGE_ENGINE=1 \-DENABLED_LOCAL_INFILE=1 \-DENABLE_DTRACE=0 \-DDEFAULT_CHARSET=utf8mb4 \-DDEFAULT_COLLATION=utf8mb4_general_ci \-DWITH_EMBEDDED_SERVER=1$ make$ make install4.配置mysql检查系统是否已经有mysql用户，如果没有则创建$ cat /etc/passwd | grep mysql$ cat /etc/group | grep mysql创建mysql用户组用户组$ useradd -M -s /sbin/nologin mysql$ useradd -g mysql mysql在/usr/local/mysql目录下添加my.cnf配置文件，配置内容在本文档最底部。注意 mysql先从/etc目录下读取my.cnf，所以/etc目录有这个文件的时候此配置失效修改权限$ chown -R mysql:mysql /usr/local/mysql$ chown -R mysql:mysql /data/mysql5.设置开机自启动$ cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld$ chmod +x /etc/init.d/mysqld$ chkconfig --add mysqld$ chkconfig mysqld on6.初始化数据库$ /usr/local/mysql/bin/mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql7.启动mysql$ service mysqld start8.设置root密码，添加一个用户并支持远程访问$ ./mysqlmysql&gt; set password=password(&apos;925&apos;);mysql&gt; grant all on *.* to dba_user@&apos;%&apos; identified by &apos;925&apos;;mysql&gt; flush privileges;mysql&gt; select user,host,authentication_string from mysql.user; 常用命令1234567891011启动服务service mysqld start关闭服务service mysqld stop``` ### my.cnf [client]port = 3306socket = /tmp/mysql.sockdefault-character-set = utf8mb4[mysqld]port = 3306socket = /tmp/mysql.sockbasedir = /usr/local/mysqldatadir = /data/mysqlpid-file = /data/mysql/mysql.piduser = mysqlbind-address = 0.0.0.0server-id = 1init-connect = ‘SET NAMES utf8mb4’character-set-server = utf8mb4 #skip-name-resolve #skip-networkingback_log = 300max_connections = 1000max_connect_errors = 6000open_files_limit = 65535table_open_cache = 128max_allowed_packet = 4Mbinlog_cache_size = 1Mmax_heap_table_size = 8Mtmp_table_size = 16Mread_buffer_size = 2Mread_rnd_buffer_size = 8Msort_buffer_size = 8Mjoin_buffer_size = 8Mkey_buffer_size = 4Mthread_cache_size = 8query_cache_type = 1query_cache_size = 8Mquery_cache_limit = 2Mft_min_word_len = 4log_bin = mysql-binbinlog_format = mixedexpire_logs_days = 30log_error = /data/mysql/mysql-error.logslow_query_log = 1long_query_time = 1slow_query_log_file = /data/mysql/mysql-slow.logperformance_schema = 0explicit_defaults_for_timestamp #lower_case_table_names = 1skip-external-lockingdefault_storage_engine = InnoDB #default-storage-engine = MyISAMinnodb_file_per_table = 1innodb_open_files = 500innodb_buffer_pool_size = 64Minnodb_write_io_threads = 4innodb_read_io_threads = 4innodb_thread_concurrency = 0innodb_purge_threads = 1innodb_flush_log_at_trx_commit = 2innodb_log_buffer_size = 2Minnodb_log_file_size = 32Minnodb_log_files_in_group = 3innodb_max_dirty_pages_pct = 90innodb_lock_wait_timeout = 120bulk_insert_buffer_size = 8Mmyisam_sort_buffer_size = 8Mmyisam_max_sort_file_size = 10Gmyisam_repair_threads = 1interactive_timeout = 28800wait_timeout = 28800[mysqldump]quickmax_allowed_packet = 16M[myisamchk]key_buffer_size = 8Msort_buffer_size = 8Mread_buffer = 4Mwrite_buffer = 4M```]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[centos7 安装 nginx]]></title>
      <url>https://xwsky.github.io/2016/10/29/centos7/centos7%20%E5%AE%89%E8%A3%85%20nginx/</url>
      <content type="text"><![CDATA[cnetos7 nginx编译安装1、安装nginx编译环境1234$ yum install gcc-c++$ yum install pcre pcre-devel$ yum install zlib zlib-devel$ yum install openssl openssl-devel 2、下载nginx（我使用的版本是1.9.12）nginx下载地址：http://nginx.org/nginx-rtmp-module 下载地址：https://github.com/arut/nginx-rtmp-module将 nginx-1.9.12.tar.gz、nginx-rtmp-module-master.zip 放在/user/local下 3、解压、编译、安装（如果不需要rtmp服务，可以不在configure中加入nginx-rtmp-module-master模块）12$ tar -zxvf nginx-1.9.12.tar.gz$ unzip nginx-rtmp-module-master.zip 12$ cd nginx-1.9.12$ ./configure --add-module=/usr/local/nginx-rtmp-module-master --with-http_flv_module --with-http_mp4_module --with-http_ssl_module --with-http_stub_status_module --with-http_gzip_static_module 如果没有error信息，就可以执行下边的安装了： 12$ make$ make install 1$ whereis nginx #默认安装在了/user/local下 4、nginx 常用命令进入/user/local/nginx/sbin目录 12345$ ./nginx #启动$ ./nginx -s stop #停止$ ./nginx -s reload #重启$ ./nginx -t #检查配置文件是否正确$ ./nginx -V #查看已经添加的模块 根据进程停止nginx 1234$ ps -ef | grep nginx #查看进程$ kill -QUIT 主进程号 #从容停止$ kill -TERM 主进程号 #快速停止$ Nginx：pkill -9 主进程号 #强行停止 5、注册服务、开机启动1$ vim /lib/systemd/system/nginx.service 创建此文件并编辑，将内容设置为如下： 12345678910111213[Unit] Description=nginx After=network.target [Service] Type=forking ExecStart=/usr/local/nginx/sbin/nginxExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/usr/local/nginx/sbin/nginx -s stopPrivateTmp=true [Install] WantedBy=multi-user.target 12345添加执行权限# chmod 754 nginx.service设置开机自启动# systemctl enable nginx.service [Unit]：服务的说明 Description：描述服务 After：描述服务类别 [Service]：服务运行参数的设置 Type=forking：是后台运行的形式 ExecStart：服务的具体运行命令 ExecReload：重启命令 ExecStop：为停止命令 PrivateTmp=True：表示给服务分配独立的临时空间 nginx服务常用命令(针对其他服务也适用) 1234567$ systemctl enable nginx.service #设为开机启动$ systemctl disable nginx.service #取消开机启动$ systemctl start nginx.service #启动服务$ systemctl stop nginx.service #停止服务$ systemctl restart nginx.service #重启服务$ systemctl status nginx.service #查看服务状态$ systemctl list-units --type=service #查看已经启动的服务 6、配置1$ vim /usr/local/nginx/conf/nginx.conf 编辑配置文件，并加入以下内容： 1234567891011121314151617rtmp &#123; server &#123; listen 1935; chunk_size 4096; #直播 application myapp &#123; live on; &#125; #点播（/home/guom/video是视频存放的目录） application vod &#123; play /home/guom/video; &#125; &#125;&#125; 完整配置文件如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;#加入rtmprtmp &#123; server &#123; listen 1935; chunk_size 4096; #直播 application myapp &#123; live on; &#125; #点播 application vod &#123; play /home/guom/video; &#125; &#125;&#125;#以下配置不同管，默认的就行http &#123; include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] "$request" ' # '$status $body_bytes_sent "$http_referer" ' # '"$http_user_agent" "$http_x_forwarded_for"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; gzip on; #gzip_http_version 1.0; gzip_min_length 1024; gzip_buffers 4 8k; gzip_comp_level 3; gzip_types text/plain text/css application/x-javascript application/javascript application/xml; gzip_disable "MSIE [1-6]\."; gzip_proxied any; gzip_vary on; autoindex on; autoindex_exact_size off; autoindex_localtime on; server &#123; listen 80; server_name www.test.com; #charset koi8-r; #access_log logs/host.access.log main; # location / &#123; # root html; # index index.html index.htm; # &#125; location / &#123; proxy_pass http://192.168.100.13:8080/; #websocket support proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection "upgrade"; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_connect_timeout 1200; proxy_read_timeout 1200; proxy_send_timeout 1200; &#125; client_max_body_size 1024m; location /test/ &#123; alias /home/guom/; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\.ht &#123; # deny all; #&#125; &#125; # another virtual host using mix of IP-, name-, and port-based configuration # #server &#123; # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125; # HTTPS server # #server &#123; # listen 443 ssl; # server_name localhost; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125;&#125; 到此为止大功告成了 备注： rtmp点播、nginx映射本地目录都必须确保需要映射的目录及其子目录的权限为755 向服务器推流可选择ffmpeg或者obs等工具 网页播放器可选择jwplayer等工具]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[centos7 安装 oracle11.2]]></title>
      <url>https://xwsky.github.io/2016/10/29/centos7/centos7%20%E5%AE%89%E8%A3%85%20oracle11.2/</url>
      <content type="text"><![CDATA[CentOS7安装oracle11.2.0.1.0数据库1.下载安装包 官方地址http://www.oracle.com/technetwork/database/enterprise-edition/downloads/112010-linx8664soft-100572.html 2.CnetOS系统环境设置12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182831.修改主机名称（可省略）$ vi /etc/hostname2.在/etc/hosts文件中添加主机名如：127.0.0.1 CentOS7 localhost#127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4::1 localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.100.29 CentOS73.安装oracle 11gr2依赖包yum install gcc make binutils gcc-c++ compat-libstdc++-33 elfutils-libelf-devel elfutils-libelf-devel-static ksh libaio libaio-devel numactl-devel sysstat unixODBC unixODBC-devel pcre-devel –y4.添加安装用户和用户组# groudadd oinstall# groupadd dba# useradd -g oinstall -G dba oracle# id oracleuid=1001(oracle) gid=1001(oinstall) groups=1001(oinstall),1002(dba)5.修改内核参数配置文件# vim /etc/sysctl.conf添加如下内容fs.aio-max-nr = 1048576fs.file-max = 6815744kernel.shmall = 2097152kernel.shmmax = 1073741824kernel.shmmni = 4096kernel.sem = 250 32000 100 128net.ipv4.ip_local_port_range = 9000 65500net.core.rmem_default = 262144net.core.rmem_max = 4194304net.core.wmem_default = 262144net.core.wmem_max = 1048576其中kernel.shmmax = 1073741824为本机物理内存（2G）的一半，单位为byte。# sysctl -p6.修改用户的限制文件# vim /etc/security/limits.conf添加以下内容oracle soft nproc 2047oracle hard nproc 16384oracle soft nofile 1024oracle hard nofile 65536oracle soft stack 10240修改/etc/pam.d/login文件：# vim /etc/pam.d/login添加以下内容：session required /lib64/security/pam_limits.sosession required pam_limits.so修改/etc/profile文件：# vim /etc/profile添加以下内容：if [ $USER = &quot;oracle&quot; ]; then if [ $SHELL = &quot;/bin/ksh&quot; ]; then ulimit -p 16384 ulimit -n 65536 else ulimit -u 16384 -n 65536 fifi7.创建安装目录和设置文件权限# mkdir -p /u01/app/oracle/product/11.2.0# mkdir /u01/app/oracle/oradata# mkdir /u01/app/oracle/inventory# mkdir /u01/app/oracle/fast_recovery_area# chown -R oracle:oinstall /u01/app/oracle# chmod -R 775 /u01/app/oracle8.设置oracle用户环境变量# su - oracle$ vim .bash_profile添加如下内容ORACLE_BASE=/u01/app/oracleORACLE_HOME=$ORACLE_BASE/product/11.2.0ORACLE_SID=orclPATH=$PATH:$ORACLE_HOME/binexport ORACLE_BASE ORACLE_HOME ORACLE_SID PATH 3.安装文件准备 123456789101112131415161718192021221.上传安装文件到/tmp目录2.解压# unzip linux.x64_11gR2_database_1of2.zip &amp;&amp; unzip linux.x64_11gR2_database_2of2.zip3.编辑静默安装文件# su - oracle$ cp -R /tmp/database/response/ .$ cd response/$ vim db_install.rsp需要设置的选项如下：oracle.install.option=INSTALL_DB_SWONLYORACLE_HOSTNAME=CentOSUNIX_GROUP_NAME=oinstallINVENTORY_LOCATION=/u01/app/oracle/inventorySELECTED_LANGUAGES=en,zh_CNORACLE_HOME=/u01/app/oracle/product/11.2.0ORACLE_BASE=/u01/app/oracleoracle.install.db.InstallEdition=EEoracle.install.db.DBA_GROUP=dbaoracle.install.db.OPER_GROUP=dbaDECLINE_SECURITY_UPDATES=true 4.根据响应文件静默安装oracle11g123456789101112131415161718$ cd /tmp/database/$ ./runInstaller -silent -responseFile /home/oracle/response/db_install.rsp -ignorePrereq开始Oracle在后台静默安装。安装过程中，如果提示[WARNING]不必理会，此时安装程序仍在后台进行，如果出现[FATAL]，则安装程序已经停止了。可以在以下位置找到本次安装会话的日志:/u01/app/oracle/inventory/logs/installActions2015-06-08_04-00-25PM.log可以切换终端执行top命令查看后台进程一直是在安装的，/u01目录也在不断增大，当出现以下提示时，代表安装成功：Successfully Setup Sofware.按照要求执行脚本。打开终端，以root身份登录，执行脚本：$ su# sh /u01/app/oracle/inventory/orainstRoot.sh# sh /u01/app/oracle/product/11.2.0/root.sh到此数据库安装完成 5.以静默方式配置监听1234$ netca /silent /responsefile /home/oracle/response/netca.rsp成功运行后，在/u01/app/oracle/product/11.2.0/network/admin/中生成listener.ora和sqlnet.ora$ netstat -tnulp | grep 1521 6.以静默方式建立新库，同时也建立一个对应的实例。12345678910111213141516171819202122232425262728$ vim /home/oracle/response/dbca.rsp设置以下参数：GDBNAME = &quot;orcl&quot;SID = &quot;orcl&quot;SYSPASSWORD = &quot;oracle&quot;SYSTEMPASSWORD = &quot;oracle&quot;SYSMANPASSWORD = &quot;oracle&quot;DBSNMPPASSWORD = &quot;oracle&quot;DATAFILEDESTINATION =/u01/app/oracle/oradataRECOVERYAREADESTINATION=/u01/app/oracle/fast_recovery_areaCHARACTERSET = &quot;ZHS16GBK&quot;TOTALMEMORY = &quot;1638&quot;其中TOTALMEMORY = &quot;1638&quot; 为1638MB，物理内存2G*80%。进行静默配置：$ dbca -silent -responseFile /home/oracle/response/dbca.rsp建库后进行实例进程检查：$ ps -ef | grep ora_ | grep -v grep查看监听状态：$ lsnrctl status登录查看实例状态：$ sqlplus / as sysdbaSQL&gt; select status from v$instance; 7.切换到root账户建立自启动脚本123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778791.修改/u01/app/oracle/product/11.2.0/bin/dbstart$ vim /u01/app/oracle/product/11.2.0/bin/dbstart将ORACLE_HOME_LISTNER=$1修改为ORACLE_HOME_LISTNER=$ORACLE_HOME2.修改/u01/app/oracle/product/11.2.0/bin/dbshut$ vim /u01/app/oracle/product/11.2.0/bin/dbshut将ORACLE_HOME_LISTNER=$1修改为ORACLE_HOME_LISTNER=$ORACLE_HOME3.修改/etc/oratab文件[oracle@CentOS ~]$ vim /etc/oratab将orcl:/u01/app/oracle/product/11.2.0:N中最后的N改为Y，成为orcl:/u01/app/oracle/product/11.2.0:Y4. 输入命令dbshut和dbstart测试$ dbshut$ dbstart6.创建启动脚本$ su -# vim /etc/rc.d/init.d/oracle添加以下内容#!/bin/sh# chkconfig: 345 61 61# description: Oracle 11g R2 AutoRun Servimces# /etc/init.d/oracle## Run-level Startup script for the Oracle Instance, Listener, and# Web Interfaceexport ORACLE_BASE=/u01/app/oracleexport ORACLE_HOME=$ORACLE_BASE/product/11.2.0export ORACLE_SID=orclexport PATH=$PATH:$ORACLE_HOME/binORA_OWNR=&quot;oracle&quot;# if the executables do not exist -- display errorif [ ! -f $ORACLE_HOME/bin/dbstart -o ! -d $ORACLE_HOME ]thenecho &quot;Oracle startup: cannot start&quot;exit 1fi# depending on parameter -- startup, shutdown, restart# of the instance and listener or usage displaycase &quot;$1&quot; instart)# Oracle listener and instance startupsu $ORA_OWNR -lc $ORACLE_HOME/bin/dbstartecho &quot;Oracle Start Succesful!OK.&quot;;;stop)# Oracle listener and instance shutdownsu $ORA_OWNR -lc $ORACLE_HOME/bin/dbshutecho &quot;Oracle Stop Succesful!OK.&quot;;;reload|restart)$0 stop$0 start;;*)echo $&quot;Usage: `basename $0` &#123;start|stop|reload|reload&#125;&quot;exit 1esacexit 07.修改/etc/init.d/oracle服务文件权限# chmod 755 /etc/init.d/oracle8.设置开机自启动# chkconfig oracle on9.进行service oracle start/stop/restart测试10.重启系统，查看是否自启动成功# reboot]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[jenkins 持续集成工具]]></title>
      <url>https://xwsky.github.io/2016/10/29/maven/jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7/</url>
      <content type="text"><![CDATA[jenkins官方地址https://jenkins.io/ 安装以2.7.2.war包为例下载后得到jenkins.war包， 1.将jenkins.war包剪切到安装目录。1F:\jenkins 2.在该目录下新建start.bat文件并添加如下内容 123set JENKINS_HOME=F:\jenkinscd /d %JENKINS_HOME%java -jar %JENKINS_HOME%\jenkins.war --httpPort=9191 3.运行start.bat。1访问地址：http://localhost:9191 4.初次登陆，需要初始化系统，控制台有提供初始化key 5.输入key后会进入到一个可以选择常用插件自动安装的选项。 6.管理员账号信息输入。 配置： 系统管理-系统设置 系统管理-Global Tool Configuration 配置maven和jdk等 构建任务例子12目标，实现对一个svn库中的一个maven web项目，每10分钟检测一次svn库内容进行检测，如果检测到代码有变化则触发构建任务，将maven项目打包成war包，并自动部署到远程tomcat中。 0.准备工作 系统管理-管理插件123456789安装jenkins将web.war包部署至远程tomcat的插件Deploy to container Plugintomcat config/tomcat-users.xml中添加 &lt;role rolename=&quot;manager-gui&quot;/&gt; &lt;role rolename=&quot;manager-script&quot;/&gt; &lt;role rolename=&quot;manager-jmx&quot;/&gt; &lt;role rolename=&quot;manager-status&quot;/&gt; &lt;user username=&quot;mytomcat3&quot; password=&quot;tomcat&quot; roles=&quot;manager-gui,manager-script,manager-jmx,manager-status&quot;/&gt; 步骤描述123456789101.在首页点击 新建2.输入构建任务名称，选择：构建一个自由风格的软件项目3.源码管理处选择 Subversion （输入svn地址和用户名和密码）4.构建触发器处选择 Poll SCM 输入 H/10 * * * *5.构建处选择 配置好的maven ；Goals clean package6.构建后操作 Deploy war/ear to a container war/ear files : demo3/target/demo3.war 此路径的完成路径是jenkins安装目录/workspace/构建任务名称demo3/target/demo3.war选择tomcat 7.x 输入用户名和密码，及tomcat url地址。7.保存后点击 立即构建 然后点击构建历史中正在构建版本 Console Output 中可以看到构建的过程。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[maven学习笔记]]></title>
      <url>https://xwsky.github.io/2016/10/29/maven/maven/</url>
      <content type="text"><![CDATA[maven学习笔记点击跳转 官方地址：http://maven.apache.org/ 1.使用Archetype生成项目骨架1234mvn archetype:generate选择 archetype原型编号默认是maven-archetype-quickstart根据提示输入要创建项目的groupId、artifactId、version以及包名package 2.依赖配置及说明12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;...&lt;/groupId&gt; 组名称 &lt;artifactId&gt;...&lt;/artifactId&gt; 产品名称 &lt;version&gt;...&lt;/version&gt; 版本号 &lt;type&gt;...&lt;/type&gt; 依赖类型默认为jar &lt;scope&gt;...&lt;/scope&gt; 依赖范围 &lt;optional&gt;...&lt;/optional&gt; 标记依赖是否可选 &lt;exclusions&gt; 用来排除传递性依赖 &lt;exclusion&gt; &lt;groupId&gt;...&lt;/groupId&gt; &lt;artifactId&gt;...&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt;&lt;/dependencies&gt;必须配置groupId、artifactId和version：依赖基本坐标可选配置type：依赖类型，默认值为jar，一般可省略。scope：依赖范围 依赖范围作用：用来控制依赖与三种classpath（编译classpath、测试classpath、运行classpath）的关系， 依赖范围准类： compile：编译依赖范围，默认的依赖方位。对于编译、测试、运行三种classpath都有效。 test：测试依赖范围，只对测试classpath有效，如JUnit。 provided：已提供的依赖范围。对于编译和测试classpath有效，但在运行时无效。 如servlet-api（应用服务器有提供，maven无需重复地引入） runtime：运行时依赖范围，对于测试和运行classpath有效，但在编译主代码时无效。如JDBC驱动。 system：系统依赖范围。和provided依赖范围相同， 但与要以&lt;systemPath&gt;$&#123;java.home&#125;/lib/rt.jar&lt;/systemPath&gt;引入本地maven仓库中没有的类库。 不可以移植。不建议使用该依赖范围。 import：导入依赖范围。不会对三种classpath产生实际的影响。 作用：将目标pom中的dependencyManagement配置导入并合并到当前POM的dependencyManagement元素中。 配置如下： &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;... &lt;/groupId&gt; &lt;artifactId&gt;... &lt;/artifactId&gt; &lt;version&gt;... &lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; optional:可选依赖，例如：一个持久层隔离工具包，支持多种数据库，在构建时只会依赖一种数据库。 可以将多种数据库驱动设置为&lt;optional&gt;true&lt;/optional&gt;,该依赖只会对当前项目起作用。 这种依赖方式违背单一职责性原则。应将可选依赖拆分成maven项目引入。exclusions：用来排除传递性依赖，然后自己指定版本引入。依赖调解： 当传递性依赖引入发生冲突（多个版本时）时遵循的原则： 第一原则：路径最近者优先。 第二原则：第一声明者优先。 依赖优化 通过 mvn dependency:list 命令可以查看maven已经解析的依赖。 通过 mvn dependency:tree 命令可以查看当前项目的依赖树。 通过 mvn dependency:analyze 工具可以帮助我们分析当前项目的依赖。 Used undeclared dependencies :项目中使用到的但是没有显示声明的依赖。 Unused declared dependencies :项目中未使用，但显示声明的依赖， 注意：dependency：analyze只会分析编译主代码和编译测试代码需要用到的依赖， 运行时需要的依赖不能检测，所以 Unused declared dependencies 的提示要人工判断是否可以删除。 3.maven仓库1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768691.分类：本地仓库和远程仓库。本地仓库 默认位置：用户目录\.m2\repository\ 修改仓库位置~/.m2/settings.xml配置中添加&lt;localRepository&gt;d:\mavenRepository&lt;/localRepository&gt; 将构建添加到本地仓库：mvn clean install远程仓库 分类：中央仓库、私服、其他仓库 中央仓库：配置文件位置 $M2_HOME/lib/maven-model-builder-3.3.9.jar，org/apache/maven/model/pom-4.0.0.xml 私服：特殊的远程仓库。 优点：1.节省外网带宽。2.加速Maven构建。3.部署第三方构建。4.提高稳定性，增强控制。5.降低中央仓库负荷。 其他仓库：如Jboss，oracle等提供的maven仓库。2.连接到远程配置pom.xml中添加&lt;project&gt; ... &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;mynexus&lt;/id&gt; &lt;name&gt;mynexus&lt;/name&gt; &lt;url&gt;http://localhost:8081/repository/maven-public/&lt;/url&gt; &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;mynexus&lt;/id&gt; &lt;name&gt;mynexus&lt;/name&gt; &lt;url&gt;http://localhost:8081/repository/maven-public/&lt;/url&gt; &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt; &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; ...&lt;/project&gt;如果需要登录认证需要在maven的setting.xml配置文件中添加,通过id关联，所以id名称必须一致。&lt;settings&gt; ... &lt;servers&gt; &lt;server&gt; &lt;id&gt;mynexus&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin123&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt; ...&lt;/settings&gt;3.部署构建到远程仓库(如果需要认证在maven的setting.xml)&lt;project&gt; ... &lt;distributionManagement&gt; &lt;repository&gt; &lt;id&gt;mynexus&lt;/id&gt; &lt;name&gt;Release to mynexus&lt;/name&gt; &lt;url&gt;http://localhost:8081/repository/maven-releases/&lt;/url&gt; &lt;/repository&gt; &lt;snapshotRepository&gt; &lt;id&gt;mynexus&lt;/id&gt; &lt;name&gt;Snapshot to mynexus&lt;/name&gt; &lt;url&gt;http://localhost:8081/repository/maven-snapshots/&lt;/url&gt; &lt;/snapshotRepository&gt; &lt;/distributionManagement&gt; ...&lt;/project&gt;配置好执行 mvn clean deploy 命令，Maven会根据pom.xml中的&lt;version&gt;1.0&lt;/version&gt;值选择提交的仓库，以-SNAPSHOT结尾的表示是快照版本 4.镜像1234567891011121314151617181920212223242526272829 如果仓库X可以提供仓库Y存储的所有内容，那么就可以认为X是Y的一个镜像。例：配置中央仓库镜像&lt;settings&gt; ... &lt;mirrors&gt; &lt;mirror&gt; &lt;id&gt;maven.net.cn&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;one of the central mirrors in China&lt;/name&gt; &lt;url&gt;http://localhost:8081/repository/maven-public/&lt;/url&gt; &lt;/mirror&gt; &lt;/mirrors&gt; ...&lt;/settings&gt;配置说明：&lt;mairrorOf&gt;&lt;/mirrorOf&gt; 匹配的仓库id。更多高级配置匹配所有远程仓库&lt;mairrorOf&gt;*&lt;/mirrorOf&gt;匹配所有远程仓库，使用localhost的除外使用file://协议的除外，即：匹配所有不在本机上远程仓库&lt;mairrorOf&gt;external:*&lt;/mirrorOf&gt;匹配仓库repo1和repo2，使用逗号分隔多个远程仓库&lt;mairrorOf&gt;repo1,repo2&lt;/mirrorOf&gt;匹配所有远程仓库，repo1除外。&lt;mairrorOf&gt;*,!repo1&lt;/mirrorOf&gt; Maven的生命周期 官方地址：http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html123456789101112131415161718192021222324252627282930313233343536373839404142Maven具有三套相互独立的生命周期：clean生命周期，default生命周期，site生命周期。1.clean生命周期 目的：清理项目。 阶段1：pre-clean 执行一些清理前需要完成的工作。 阶段2：清理上一次构建生成的文件。 阶段3：执行一些清理后需要完成的工作。2.default生命周期 定义了真正构建是所需要执行的所有步骤。 阶段1：validate 阶段2：initialize 阶段3：generate-sources 阶段4：process-sources 处理项目主资源文件。一般来说， 是对src/main/resources目录的内容进行变量替换等工作后，复制到项目输出的主classpath目录中。 阶段5：generate-resources 阶段6：process-resources 阶段7：compile 编译项目的主源码。一般来说，是编译src/main/java目录下的java文件至项目输出的主classpath目录中 阶段8：process-classes 阶段9：generate-test-sources 阶段10：process-test-sources 处理项目测试资源文件。一般来说，是对src/test/resources目录的内容进行变量替换 等工作后，复制到项目输出的测试classpath目录中。 阶段11：generate-test-resources 阶段12：process-test-resources 阶段13：test-compile 编译项目的测试代码。一般来说， 是编译src/test/java目录下的java文件至项目输出的测试classpath目录中。 阶段14：process-test-classes 阶段15：test使用但远处而是框架运行测试，测试代码不会被打包或部署。 阶段16：prepare-package 阶段17：package 接收编译好的代码，打包成可发布的格式，如jar 阶段18：pre-integration-test 阶段19：integration-test 阶段20：post-integration-test 阶段21：verify 阶段22：install 将包安装到maven本地仓库，供本地其他Maven项目使用。 阶段23：deploy 将最终的包复制到远程仓库，供其他开发人员和Maven项目使用。3. site生命周期 目的：自动建立和发布项目站点。 阶段1：pre-site 执行一些在生成项目站点之前需要完成的工作。 阶段2：site 生成项目站点文档。 阶段3：site-deploy 将生成的项目站点腹部到服务器上。 6.命令行与生命周期。12345678特别说明：Maven的各个生命周期是相互独立的，而一个生命周期的阶段是有前后依赖关系的。命令1：mvn clean:该命令调用clean生命周期的clean阶段。实际执行的阶段为clean生命周期的pre-clean和clean阶段。命令2：mvn test:该命令调用default生命周期的test阶段。实际执行的阶段为default生命周期的validate、initialize ... 直到test的所有阶段。命令3：mvn clean install：该命令调用clean生命周期的clean阶段和default生命周期的install阶段。命令4：mvn clean deploy site-deploy：该命令调用clean生命周期的clean阶段、default生命周期的deploy阶段，以及 site生命周期的所有阶段。 7.插件123456789101112131415161718192021222324252627Maven 的生命周期的阶段与插件的目标相互绑定，以完成某个具体的构建任务。绑定方式：内置绑定、自定义绑定。内置绑定：为了简化用户操作，Maven为主要的生命周期阶段绑定了很多插件的目标。自定义绑定：用户自己选择将某个插件目标绑定到生命周期的某个阶段。例打包源码插件配置： &lt;build&gt; ... &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt; &lt;version&gt;2.1.1&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;attach-sources&lt;/id&gt; &lt;phase&gt;verify&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;jar-no-fork&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;/plugins&gt; ... &lt;/build&gt; phase：生命周期阶段 goal：插件目标 8.聚合与继承 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051聚合模块： 打包类型必须为pom类型 &lt;packaging&gt;pom&lt;/packaging&gt; 聚合模块和其他模块的目录结构分为父子关系和平行关系两种 平行关 聚合模块pom.xml添加如下格式内容 &lt;modules&gt; &lt;module&gt;../fshop-common&lt;/module&gt; &lt;module&gt;../fshop-provider&lt;/module&gt; &lt;module&gt;模块相对于聚合莫空pom.xml所处目录名称&lt;/module&gt; &lt;/modules&gt; 父子关系 聚合模块pom.xml添加如下格式内容 &lt;modules&gt; &lt;module&gt;fshop-common&lt;/module&gt; &lt;module&gt;fshop-provider&lt;/module&gt; &lt;module&gt;模块相对于聚合莫空pom.xml所处目录名称&lt;/module&gt; &lt;/modules&gt; 约定：为了方便快速定位模块内容，模块所处目录名称应当与其artifactId一致 继承： 1.子pom引用父pom书写方式: &lt;parent&gt; &lt;groupId&gt;fshop-parent&lt;/groupId&gt; &lt;artifactId&gt;fshop-parent&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;relativePath&gt;../fshop-parent/pom.xml&lt;/relativePath&gt; &lt;/parent&gt; 2.可继承的pom元素 groupId: 项目组ID，项目坐标的核心元素 version：项目版本，项目坐标的核心元素。 description：项目的描述信息。 organization：项目的组织信息。 inceptionYear：项目的创建年份。 url：项目的URL地址。 developers：项目的开发者信息。 contributors：项目的贡献者信息。 distributionManagement：项目的部署配置。 issueManagement：项目的缺陷跟踪系统信息。 ciManagement：项目的持续集成系统信息。 scm：项目的版本控制系统信息。 mailingLists：项目的邮件列表信息。 properties：自定义的Maven属性。 dependencies：项目的依赖配置。 dependencyManagement：项目的依赖管理配置。 repositories：项目的仓库配置。 build：包括项目的源码目录配置、输出目录配置、插件配置、插件管理配置等。 reporting：包括项目的报告输出目录配置、报告插件配置等。 3.依赖管理： 如果父pom中用dependencies方式配置依赖，则配置的依赖都会被引入到子项目。 如果父pom中使用dependencyManagement方式引入依赖，则子项目中需要dependencies方式 声明依赖groupId和artifactId即可，其他的配置会继承父pom]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[nexus私服]]></title>
      <url>https://xwsky.github.io/2016/10/29/maven/nexus%E7%A7%81%E6%9C%8D/</url>
      <content type="text"><![CDATA[nexus私服出色的maven私服。 官方下载地址http://www.sonatype.com/download-oss-sonatype 安装以windows 压缩版为例： 下载nexus-3.0.1-01-win64.zip 1.解压压缩包。 2.在bin目录新建start.bat文件，添加如下内容1nexus.exe /run 3.运行start.bat。即可使用12访问地址：http://localhost:8081默认管理员账号及密码：admin admin123 4.添加windows服务123将nexus/bin目录添加到path中添加服务 nexus.exe /install删除服务 nexus.exe /uninstall 特别说明，nexus3.0版本，默认情况下data文件夹存放用户的数据。如果需要备份只需要备份该文件夹即可。 配置：12bin/nexus.vmoptions文件中可以配置运行内存，数据，和零时数据存放的路径等配置。etc/org.sonatype.nexus.cfg 文件中可以配置端口号 第三方jar安装命令nexus3.0版本，需要用maven客户端使用命令方式上传第三方jar包123456789101112mvn deploy:deploy-file -DgroupId=org.oracle -DartifactId=jdbc -Dversion=6 -Dpackaging=jar -DrepositoryId=mynexus -Dfile=D:\3rd\ojdbc6.jar -Durl=http://localhost:8081/repository/3rd-part/ -DgeneratePom=false说明：-DrepositoryId=mynexus 对应的就是Maven中settings.xml的认证配的名字。私服认证信息&lt;servers&gt; &lt;server&gt; &lt;id&gt;mynexus&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin123&lt;/password&gt; &lt;/server&gt;&lt;/servers&gt;]]></content>
    </entry>

    
  
  
</search>
