<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[centos 添加服务]]></title>
      <url>https://xwsky.github.io/2016/10/29/centos7/centos%20%E6%B7%BB%E5%8A%A0%E6%9C%8D%E5%8A%A1/</url>
      <content type="text"><![CDATA[Centos 系统服务;1234561.系统（system）服务,所在目录:/lib/systemd/system2.用户服务，所在目录:/usr/lib/systemd/区别： 系统服务开机没有登录就能运行。用户服务得用户登录后才能启动。 例子123456789101112131415161718192021222324252627282930313233343536373839在系统服务目录下新建nginx服务，文件需要以.service结尾。vi /lib/systemd/system/nginx.service添加如下内容[Unit] Description=nginx After=network.target [Service] Type=forking ExecStart=/www/lanmps/init.d/nginx start ExecReload=/www/lanmps/init.d/nginx restart ExecStop=/www/lanmps/init.d/nginx stop PrivateTmp=true [Install] WantedBy=multi-user.target设置执行权限chmod 754 nginx.service设置开机启动systemctl enable nginx.service至此系统级的服务已经配置好了，下面是一些参数的说明================================参数说明================================[Unit]:服务的说明Description:描述服务After:描述服务类别[Service]服务运行参数的设置Type=forking是后台运行的形式ExecStart为服务的具体运行命令ExecReload为重启命令ExecStop为停止命令PrivateTmp=True表示给服务分配独立的临时空间注意：[Service]的启动、重启、停止命令全部要求使用绝对路径[Install]服务安装的相关设置，可设置为多用户 系统服务命令1.设置服务开机自启动1systemctl enable httpd.service 2.设置服务开机不自启动1systemctl disable httpd.service 3.查看服务启动状态1systemctl status httpd.service （服务详细信息） 4.显示所有已启动的服务1systemctl is-active httpd.service （仅显示是否 Active) 5.启动某服务1systemctl start httpd.service 6.停止某服务1systemctl stop httpd.service 7.重启某服务1systemctl restart httpd.service]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[centos7 安装 mysql 5.7.14]]></title>
      <url>https://xwsky.github.io/2016/10/29/centos7/centos7%20%E5%AE%89%E8%A3%85%20mysql%205.7.14/</url>
      <content type="text"><![CDATA[centos7 mysql5.7.14编译好的通用二进制文件安装myql下载地址：http://dev.mysql.com/downloads/mysql/12345678910111213141516171819选择 Linux - GenericLinux - Generic (glibc 2.5) (x86, 64-bit), Compressed TAR Archivemysql-5.7.14-linux-glibc2.5-x86_64.tar.gz通过官方编译好的二进制文件tar.gz压缩包安装较为简单将下面的源码编译安装中的安装步骤中的2，3步骤换为将mysql安装文件复制到默认的安装路径下$ mv /mysql-5.7.14-linux-glibc2.5-x86_64.tar.gz /usr/local$ tar -zvxf mysql-5.7.14-linux-glibc2.5-x86_64.tar.gz将减压后的文件夹更名为mysql$ mv mysql-5.7.14-linux-glibc2.5-x86_64 mysql然后从第4步开始操作，第6步的初始化数据库，默认的数据存放路径为安装路径的data文件夹下$ /usr/local/mysql/bin/mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data备注：如果改变默认安装路径，则需要 修改/my.cnf，/etc/init.d/mysqld（/usr/local/mysql/support-files/mysql.serve的副本启动文件）中的 basedir=&apos;&apos;和datadir=&apos;&apos;路径 ===================================================================== centos 7 msql5.7.14源码编译安装1.下载所需安装包myql下载地址：http://dev.mysql.com/downloads/mysql/1234选择 Source CodeGeneric Linux (Architecture Independent), Compressed TAR Archive Includes Boost Headersmysql-boost-5.7.14.tar.gz说明：5.7以后必须要有Boost的支持，所以之间下载包含boost的源码。 2.安装123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172731.检查是否已经安装过mysql$ rpm -qa | grep mysql有的话卸载以前安装的mysql$ rpm -e --nodeps xxx （xxx 是搜索结果）删除所有相关文件（例如：/etc/my.cnf）注意centos 7 默认在/etc下有my.cnf文件将这个改名或删除，不然mysql启动会先加载/etc下的my.cnf文件导致，mysql启动失败例如$ mv /etc/my.cnf /etc/my.cnf.back2.安装编译代码的依赖包$ yum -y install make gcc-c++ cmake bison-devel ncurses-devel libaio$ yum install libaio libaio-devel -y$ yum install perl-Data-Dumper -y$ yum install net-tools -y3.加压缩并安装$ tar -zvxf mysql-boost-5.7.14.tar.gz$ cd mysql-5.7.14$ cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql \-DMYSQL_DATADIR=/data/mysql \-DDOWNLOAD_BOOST=1 \-DWITH_BOOST=./boost \-DSYSCONFDIR=/etc \-DWITH_INNOBASE_STORAGE_ENGINE=1 \-DWITH_PARTITION_STORAGE_ENGINE=1 \-DWITH_FEDERATED_STORAGE_ENGINE=1 \-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \-DWITH_MYISAM_STORAGE_ENGINE=1 \-DENABLED_LOCAL_INFILE=1 \-DENABLE_DTRACE=0 \-DDEFAULT_CHARSET=utf8mb4 \-DDEFAULT_COLLATION=utf8mb4_general_ci \-DWITH_EMBEDDED_SERVER=1$ make$ make install4.配置mysql检查系统是否已经有mysql用户，如果没有则创建$ cat /etc/passwd | grep mysql$ cat /etc/group | grep mysql创建mysql用户组用户组$ useradd -M -s /sbin/nologin mysql$ useradd -g mysql mysql在/usr/local/mysql目录下添加my.cnf配置文件，配置内容在本文档最底部。注意 mysql先从/etc目录下读取my.cnf，所以/etc目录有这个文件的时候此配置失效修改权限$ chown -R mysql:mysql /usr/local/mysql$ chown -R mysql:mysql /data/mysql5.设置开机自启动$ cp /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld$ chmod +x /etc/init.d/mysqld$ chkconfig --add mysqld$ chkconfig mysqld on6.初始化数据库$ /usr/local/mysql/bin/mysqld --initialize-insecure --user=mysql --basedir=/usr/local/mysql --datadir=/data/mysql7.启动mysql$ service mysqld start8.设置root密码，添加一个用户并支持远程访问$ ./mysqlmysql&gt; set password=password(&apos;925&apos;);mysql&gt; grant all on *.* to dba_user@&apos;%&apos; identified by &apos;925&apos;;mysql&gt; flush privileges;mysql&gt; select user,host,authentication_string from mysql.user; 常用命令1234567891011启动服务service mysqld start关闭服务service mysqld stop``` ### my.cnf [client]port = 3306socket = /tmp/mysql.sockdefault-character-set = utf8mb4[mysqld]port = 3306socket = /tmp/mysql.sockbasedir = /usr/local/mysqldatadir = /data/mysqlpid-file = /data/mysql/mysql.piduser = mysqlbind-address = 0.0.0.0server-id = 1init-connect = ‘SET NAMES utf8mb4’character-set-server = utf8mb4 #skip-name-resolve #skip-networkingback_log = 300max_connections = 1000max_connect_errors = 6000open_files_limit = 65535table_open_cache = 128max_allowed_packet = 4Mbinlog_cache_size = 1Mmax_heap_table_size = 8Mtmp_table_size = 16Mread_buffer_size = 2Mread_rnd_buffer_size = 8Msort_buffer_size = 8Mjoin_buffer_size = 8Mkey_buffer_size = 4Mthread_cache_size = 8query_cache_type = 1query_cache_size = 8Mquery_cache_limit = 2Mft_min_word_len = 4log_bin = mysql-binbinlog_format = mixedexpire_logs_days = 30log_error = /data/mysql/mysql-error.logslow_query_log = 1long_query_time = 1slow_query_log_file = /data/mysql/mysql-slow.logperformance_schema = 0explicit_defaults_for_timestamp #lower_case_table_names = 1skip-external-lockingdefault_storage_engine = InnoDB #default-storage-engine = MyISAMinnodb_file_per_table = 1innodb_open_files = 500innodb_buffer_pool_size = 64Minnodb_write_io_threads = 4innodb_read_io_threads = 4innodb_thread_concurrency = 0innodb_purge_threads = 1innodb_flush_log_at_trx_commit = 2innodb_log_buffer_size = 2Minnodb_log_file_size = 32Minnodb_log_files_in_group = 3innodb_max_dirty_pages_pct = 90innodb_lock_wait_timeout = 120bulk_insert_buffer_size = 8Mmyisam_sort_buffer_size = 8Mmyisam_max_sort_file_size = 10Gmyisam_repair_threads = 1interactive_timeout = 28800wait_timeout = 28800[mysqldump]quickmax_allowed_packet = 16M[myisamchk]key_buffer_size = 8Msort_buffer_size = 8Mread_buffer = 4Mwrite_buffer = 4M```]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[centos7 安装 nginx]]></title>
      <url>https://xwsky.github.io/2016/10/29/centos7/centos7%20%E5%AE%89%E8%A3%85%20nginx/</url>
      <content type="text"><![CDATA[cnetos7 nginx编译安装1、安装nginx编译环境1234$ yum install gcc-c++$ yum install pcre pcre-devel$ yum install zlib zlib-devel$ yum install openssl openssl-devel 2、下载nginx（我使用的版本是1.9.12）nginx下载地址：http://nginx.org/nginx-rtmp-module 下载地址：https://github.com/arut/nginx-rtmp-module将 nginx-1.9.12.tar.gz、nginx-rtmp-module-master.zip 放在/user/local下 3、解压、编译、安装（如果不需要rtmp服务，可以不在configure中加入nginx-rtmp-module-master模块）12$ tar -zxvf nginx-1.9.12.tar.gz$ unzip nginx-rtmp-module-master.zip 12$ cd nginx-1.9.12$ ./configure --add-module=/usr/local/nginx-rtmp-module-master --with-http_flv_module --with-http_mp4_module --with-http_ssl_module --with-http_stub_status_module --with-http_gzip_static_module 如果没有error信息，就可以执行下边的安装了： 12$ make$ make install 1$ whereis nginx #默认安装在了/user/local下 4、nginx 常用命令进入/user/local/nginx/sbin目录 12345$ ./nginx #启动$ ./nginx -s stop #停止$ ./nginx -s reload #重启$ ./nginx -t #检查配置文件是否正确$ ./nginx -V #查看已经添加的模块 根据进程停止nginx 1234$ ps -ef | grep nginx #查看进程$ kill -QUIT 主进程号 #从容停止$ kill -TERM 主进程号 #快速停止$ Nginx：pkill -9 主进程号 #强行停止 5、注册服务、开机启动1$ vim /lib/systemd/system/nginx.service 创建此文件并编辑，将内容设置为如下： 12345678910111213[Unit] Description=nginx After=network.target [Service] Type=forking ExecStart=/usr/local/nginx/sbin/nginxExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/usr/local/nginx/sbin/nginx -s stopPrivateTmp=true [Install] WantedBy=multi-user.target 12345添加执行权限# chmod 754 nginx.service设置开机自启动# systemctl enable nginx.service [Unit]：服务的说明 Description：描述服务 After：描述服务类别 [Service]：服务运行参数的设置 Type=forking：是后台运行的形式 ExecStart：服务的具体运行命令 ExecReload：重启命令 ExecStop：为停止命令 PrivateTmp=True：表示给服务分配独立的临时空间 nginx服务常用命令(针对其他服务也适用) 1234567$ systemctl enable nginx.service #设为开机启动$ systemctl disable nginx.service #取消开机启动$ systemctl start nginx.service #启动服务$ systemctl stop nginx.service #停止服务$ systemctl restart nginx.service #重启服务$ systemctl status nginx.service #查看服务状态$ systemctl list-units --type=service #查看已经启动的服务 6、配置1$ vim /usr/local/nginx/conf/nginx.conf 编辑配置文件，并加入以下内容： 1234567891011121314151617rtmp &#123; server &#123; listen 1935; chunk_size 4096; #直播 application myapp &#123; live on; &#125; #点播（/home/guom/video是视频存放的目录） application vod &#123; play /home/guom/video; &#125; &#125;&#125; 完整配置文件如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;#加入rtmprtmp &#123; server &#123; listen 1935; chunk_size 4096; #直播 application myapp &#123; live on; &#125; #点播 application vod &#123; play /home/guom/video; &#125; &#125;&#125;#以下配置不同管，默认的就行http &#123; include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] "$request" ' # '$status $body_bytes_sent "$http_referer" ' # '"$http_user_agent" "$http_x_forwarded_for"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; gzip on; #gzip_http_version 1.0; gzip_min_length 1024; gzip_buffers 4 8k; gzip_comp_level 3; gzip_types text/plain text/css application/x-javascript application/javascript application/xml; gzip_disable "MSIE [1-6]\."; gzip_proxied any; gzip_vary on; autoindex on; autoindex_exact_size off; autoindex_localtime on; server &#123; listen 80; server_name www.test.com; #charset koi8-r; #access_log logs/host.access.log main; # location / &#123; # root html; # index index.html index.htm; # &#125; location / &#123; proxy_pass http://192.168.100.13:8080/; #websocket support proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection "upgrade"; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_connect_timeout 1200; proxy_read_timeout 1200; proxy_send_timeout 1200; &#125; client_max_body_size 1024m; location /test/ &#123; alias /home/guom/; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache's document root # concurs with nginx's one # #location ~ /\.ht &#123; # deny all; #&#125; &#125; # another virtual host using mix of IP-, name-, and port-based configuration # #server &#123; # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125; # HTTPS server # #server &#123; # listen 443 ssl; # server_name localhost; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125;&#125; 到此为止大功告成了 备注： rtmp点播、nginx映射本地目录都必须确保需要映射的目录及其子目录的权限为755 向服务器推流可选择ffmpeg或者obs等工具 网页播放器可选择jwplayer等工具]]></content>
    </entry>

    
  
  
</search>
